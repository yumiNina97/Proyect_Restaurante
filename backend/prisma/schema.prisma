generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model categorias {
  id          Int         @id @default(autoincrement())
  nombre      String      @unique @db.VarChar(100)
  descripcion String?
  productos   productos[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model detallespedido {
  pedido_id       Int
  producto_id     Int
  cantidad        Int
  precio_unitario Decimal   @db.Decimal(10, 2)
  pedidos         pedidos   @relation(fields: [pedido_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_pedido")
  productos       productos @relation(fields: [producto_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_producto")

  @@id([pedido_id, producto_id])
}

model likesblog {
  publicacion_id    Int
  usuario_id        Int
  publicacionesblog publicacionesblog @relation(fields: [publicacion_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_publicacion")
  usuarios          usuarios          @relation(fields: [usuario_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_usuario")

  @@id([publicacion_id, usuario_id])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model pedidos {
  id             Int                @id @default(autoincrement())
  usuario_id     Int
  fecha_pedido   DateTime           @default(now()) @db.Timestamp(6)
  estado         estado_pedido_enum @default(colocado)
  total          Decimal            @db.Decimal(10, 2)
  detallespedido detallespedido[]
  usuarios       usuarios           @relation(fields: [usuario_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_usuario")

  @@index([usuario_id], map: "idx_pedidos_usuario_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model productos {
  id                    Int              @id @default(autoincrement())
  categoria_id          Int
  nombre                String           @db.VarChar(255)
  descripcion_breve     String?          @db.VarChar(255)
  descripcion_detallada String?
  ingredientes          String?
  precio                Decimal          @db.Decimal(10, 2)
  imagen_url            String?          @db.VarChar(2048)
  detallespedido        detallespedido[]
  categorias            categorias       @relation(fields: [categoria_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_categoria")

  @@index([categoria_id], map: "idx_productos_categoria_id")
}

model publicacionesblog {
  id                  Int         @id @default(autoincrement())
  autor_id            Int
  titulo              String      @db.VarChar(255)
  contenido           String
  fecha_creacion      DateTime    @default(now()) @db.Timestamp(6)
  fecha_actualizacion DateTime?   @db.Timestamp(6)
  imagen_url          String?     @db.VarChar(255)
  contador_likes      Int         @default(0)
  likesblog           likesblog[]
  usuarios            usuarios    @relation(fields: [autor_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_autor")

  @@index([autor_id], map: "idx_publicaciones_autor_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model reservas {
  id                Int                 @id @default(autoincrement())
  usuario_id        Int?
  nombre_cliente    String?             @db.VarChar(150)
  contacto_cliente  String?             @db.VarChar(255)
  fecha             DateTime            @db.Date
  hora              DateTime            @db.Time(6)
  numero_comensales Int
  estado            estado_reserva_enum @default(solicitada)
  usuarios          usuarios?           @relation(fields: [usuario_id], references: [id], onUpdate: NoAction, map: "fk_usuario")

  @@index([fecha], map: "idx_reservas_fecha")
}

model usuarios {
  id                Int                 @id @default(autoincrement())
  nombre            String              @db.VarChar(150)
  email             String              @unique @db.VarChar(255)
  contrasena_hash   String              @db.VarChar(255)
  fecha_registro    DateTime            @default(now()) @db.Timestamp(6)
  rol               tipo_rol            @default(usuario)
  likesblog         likesblog[]
  pedidos           pedidos[]
  publicacionesblog publicacionesblog[]
  reservas          reservas[]
}

enum estado_pedido_enum {
  colocado
  en_proceso
  completado
  cancelado
}

enum estado_reserva_enum {
  solicitada
  confirmada
  cancelada
  completada
}

enum rol_usuario_enum {
  cliente
  administrador
}

enum tipo_rol {
  usuario
  administrador
}
